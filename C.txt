
import static java.lang.System.out;
import java.util.ArrayList;
import java.util.Scanner;

public class C {

    static ArrayList<Integer>[] graph;
    static int[] length;
    static boolean[] leaf;
    static boolean[] visited;
    static double[] prob;

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        graph = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<Integer>();
        }
        length = new int[n];
        leaf = new boolean[n];
        visited = new boolean[n];
        prob = new double[n];
        for (int i = 0; i < n - 1; i++) {
            int u = in.nextInt() - 1;
            int v = in.nextInt() - 1;
            graph[u].add(v);
            graph[v].add(u);
        }
        prob[0] = 1;
        dfs(0, 0);
        double result = 0.0;
        for (int i = 0; i < n; i++) {
            if (leaf[i]) {
                result += prob[i] * length[i];
            }
        }
        System.out.println(result);
    }

    public static void dfs(int v, int len) {
        boolean isLeaf = true;
        visited[v] = true;
        int total = graph[v].size();
        int alreadyVisited = 0;
        for (int i = 0; i < graph[v].size(); i++) {
            int to = graph[v].get(i);
            if (visited[to]) {
                alreadyVisited += 1;
            }
        }
        for (int i = 0; i < graph[v].size(); i++) {
            int to = graph[v].get(i);
            if (!visited[to]) {
                prob[to] = prob[v] * 1.0 / (total - alreadyVisited);
                visited[to] = true;
                length[to] = len + 1;
                isLeaf = false;
                dfs(to, len + 1);
            }
        }
        leaf[v] = isLeaf;
    }
}
